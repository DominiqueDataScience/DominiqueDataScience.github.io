lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
rm(x)
plot(e,
xlab = "Index",
ylab = "Residuals (mpg)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
plot(e,
xlab = "Index",
ylab = "Residuals (mpg)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(i, i), c(e[i], 0), col = "red" , lwd = 2)
fit2<- lm(mpg ~ am + qsec + wt, data = mtcars)
summary(fit2)
summary(fit1)
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
library(ggplot2)
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 0.2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 0.02, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
plot(x,y)
rm(g)
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 0.02, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
g1 <- ggplot(mtcars, aes(x = am, y = mpg, fill = am)) +
geom_boxplot() +
scale_x_discrete(name = 'Transmission', breaks = c('0','1'),
labels=c("Automatic","Manual")) +
theme(legend.position="none") +
ggtitle('Figure 1: Fuel efficiency: MPG vs Transmission') +
labs(y = "Miles per US gallon (mpg)") +
theme(plot.title = element_text(size=16, face="bold", vjust=2))
plot(g1)
rm(g)
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 0.02, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
e = c(resid(lm(mpg ~ 1, data = mtcars)),
resid(lm(mpg ~ am + qsec + wt, data = mtcars)))
fit = factor(c(rep("Itc", nrow(mtcars)),
rep("Itc, slope", nrow(mtcars))))
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 5, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
fit
e
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g
g = g + geom_point()
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2)
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stack = "center")
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center")
g = g + xlab("Fitting approach")
g = g + ylab("Residual mpg")
g
summary(fit1)$sigma
fit1
summary(fit1)
summary(fit1)$rsquared
summary(fit1)$r
summary(fit1)$rsq
summary(fit1)$r.squared
seq(c(1,100))
c(seq(1,100))
y <- mtcars$mpg; x <- c(seq(1,length(y))); n <- length(y)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
newx = data.frame(x = seq(min(x), max(x), length = 20))
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
newx = data.frame(x = seq(min(x), max(x), length = 32))
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
factor_cols <- c("cyl", "vs", "am", "gear", "carb")
mtcars <- mtcars %>% mutate_each_(funs(factor), factor_cols)
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
newx
newx = data.frame(as.factor(x = seq(min(x), max(x), length = 32)))
p1 = data.frame(predict(fit1, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit1, newdata = newx,interval = ("prediction")))
plot(fit1)
plot(fit1)
round(dfbeta(fit1),3)
round(hatvalues(fit1),3)
round(dfbeta(fit1)[,2],3)
plot(predict(fit1), resid(fit1))
plot(predict(fit1), resid(fit), xlab = "mtcars index", ylab = "Residuals (mpg)", bg = "lightblue", col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(i, i), c(e[i], 0), col = "red" , lwd = 2)
plot(predict(fit1), resid(fit), xlab = "mtcars index", ylab = "Residuals (mpg)", bg = "lightblue", col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(predict[i],predict[i]), c(e[i], 0), col = "red" , lwd = 2)
plot(predict(fit1), resid(fit), xlab = "mtcars index", ylab = "Residuals (mpg)", bg = "lightblue", col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(predict[i],resid[i]), c(e[i], 0), col = "red" , lwd = 2)
plot(predict(fit1), resid(fit1), xlab = "mtcars index", ylab = "Residuals (mpg)", bg = "lightblue", col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(predict(fit1)[i],predict(fit1)[i]), c(resid(fit1)[i], 0), col = "red" , lwd = 2)
plot(fit)
plot(fit1)
plot(fit1)$plo1
fit1
head(fit1)
tail(fit1)
plot(predict(fit1), resid(fit1), xlab = "predict (fit)", ylab = "Residuals (mpg)", bg = "lightblue", col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(predict(fit1)[i],predict(fit1)[i]), c(resid(fit1)[i], 0), col = "red" , lwd = 2)
install.packages(corrplot)
install.packages("corrplot")
install.packages("caret", dep = TRUE)
load("C:/Users/Dominique/Google Drive/Coursera/practicalmachinelearning/.RData")
x <- training[-ncol(training)]
y <- training$classe
registerDoParallel(cl)
mod_rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)}
registerDoSEQ()
options(warn=-1)
suppressWarnings(library(foreach))
suppressWarnings(library(caret))
suppressWarnings(library(ggplot2))
suppressWarnings(library(randomForest))
suppressWarnings(library(gbm))
suppressWarnings(library(doParallel))
suppressWarnings(library(plyr))
set.seed(12345)
x <- training[-ncol(training)]
y <- training$classe
registerDoParallel(cl)
mod_rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% {
randomForest(x, y, ntree=ntree)}
registerDoSEQ()
mod_rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% { randomForest(x, y, ntree=ntree)}
registerDoParallel(cl)
mod_rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% { randomForest(x, y, ntree=ntree)}
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
mod_rf <- foreach(ntree=rep(150, 6), .combine=randomForest::combine, .packages='randomForest') %dopar% { randomForest(x, y, ntree=ntree)}
pred2_rf <- predict(mod_rf, testing)
confusionMatrix(pred2_rf,testing$classe)
registerDoParallel(cl)
mod_rf2 <- train(y ~ x , method = "rf", data = training, trControl = trainControl(method = "cv", number = 10))
mod_rf2 <- train(y ~ . , method = "rf", data = x, trControl = trainControl(method = "cv", number = 10))
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
mod_rf2 <- train(y ~ . , method = "rf", data = x, trControl = trainControl(method = "cv", number = 10))
pred_rf2 <- predict(mod_rf2, testing)
confusionMatrix(pred_rf2,testing$classe)
predictions1 <- predict(rf, newdata=training)
confusionMatrix(predictions1,training$classe)
prediction <- predict(mod_rf, training)
confusionMatrix(prediction, training$classe)
prediction <- predict(mod_rf, testing)
confusionMatrix(prediction, testing$classe)
mod_rf2
plot(mod_rf2, ylim = c(0.9, 1))
mod_rf3 <- train(y ~ . , method = "rf", data = x)
mod_rf3 <- train(y ~ . , method = "rf", data = x)
registerDoParallel(cl)
mod_rf3 <- train(y ~ . , method = "rf", data = x)
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
mod_rf3 <- train(y ~ . , method = "rf", data = x)
?train
?train.default
?train.default
save.image("C:/Users/Dominique/Google Drive/Coursera/practicalmachinelearning/.RData")
load("C:/Users/Dominique/Google Drive/Hackathon - Dealing Room/.RData")
head(koersdata)
library(manipulate)
?manipulate
manipulate(plot(x=Datum, y=Koers, data=koersdata, type = Security), factor = picker(Security))
str(koersdata$Security)
security_list <- c(str(koersdata$Security))
security_list
security_list <- c(unique(koersdata$Security))
security_list
security_list <- c(koersdata$Security))
security_list <- c(koersdata$Security)
head(security_list)
levels(koersdata$Security)
security_list <- levels(koersdata$Security)
manipulate(plot(x=Datum, y=Koers, data=koersdata, type = Security), factor = picker(security_list)
)
names(koersdata)
manipulate(plot(x=koersdata$Datum, y=koersdata$Koers, data=koersdata, type = Security), factor = picker(security_list)
)
manipulate(plot(x=koersdata$Datum, y=koersdata$Koers, data=koersdata, type = koersdata$Security), factor = picker(security_list)
)
save.image("C:/Users/Dominique/Google Drive/Hackathon - Dealing Room/.RData")
manipulate(plot(x=koersdata$Datum, y=koersdata$Koers, data=koersdata, type = koersdata$Security), factor = picker(security_list))
install.packages("shiny")
library(shiny)
library(manipulate)
install.packages("rChart")
install.packages("rCharts")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='dominiquedatascience', token='0921D748FA1761CB9F810A0BFA05B3CA', secret='q41o38NKypNCu6L/dh0aOCH3GpVXVIGFlXXpZZuK')
library(shinyapps)
install.packages("Rtools")
install.packages("RTools")
install.packages("devtools")
install.packages("shiny")
install.packages("manipulate")
install.packages("rCharts")
install.packages("rChart")
install_github('rCharts', 'ramnathv')
library(devtools)
install_github('rCharts', 'ramnathv')
install_github('slidify', 'ramnathv')
install_github('ramnathv/slidify')
install_github('ramnathv/rcharts')
install_github('ramnathv/rcharts', force = TRUE)
install_github('ramnathv/slidify', force = TRUE)
library(rsconnect)
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='dominiquedatascience', token='0921D748FA1761CB9F810A0BFA05B3CA', secret='q41o38NKypNCu6L/dh0aOCH3GpVXVIGFlXXpZZuK')
library(shiny)
getwd()
setwd("C:/Users/Dominique/Google Drive/Coursera/data-products/CourseProject/")
deployApp()
install.packages("klaR")
install.packages("e1071")
install.packages("sda")
install.packages("rda")
install.packages("gbm")
install.packages("data.table")
install.packages("curl")
install.packages("curl")
install.packages("randomForest")
install.packages("sda")
deployApp()
library(rsconnect)
getwd()
deployApp()
install.packages("MASS")
install.packages("caret", dependencies = TRUE)
install.packages("matrix)
install.packages("matrix")
install.packages("Matrix")
deployApp()
install.packages("curl")
library(curl)
deployApp()
deployApp()
library(slidify)
install_github("slidify", "ramnathv")
library(devtools)
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github(ramnathv/slidify)
install_github("ramnathv/slidify")
install_github("ramnathv/slidify", force = TRUE)
install_github("ramnathv/slidifyLibraries")
library(slidify)
getwd()
setwd("C:/Users/Dominique/Google Drive/Coursera/data-products"
)
getwd()
author("Data Products Presentation")
?hitheme
slidify(index.Rmd)
getwd()
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
require(rCharts)
wine_url <- "http://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/wine.csv"
dataWine <- "./data/wine.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(dataWine)) {
download.file(wine_url, destfile=dataWine, method="curl")
}
raw_data <- read.csv(dataWine)
attributes <- c("Class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids",
"Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
names(raw_data) <- attributes
raw_data$Class <- as.factor(raw_data$Class)
raw_data[,6] = as.numeric(as.character(raw_data[,6]))
raw_data[,14] = as.numeric(as.character(raw_data[,14]))
wine_url <- "http://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/wine.csv"
dataWine <- "./data/wine.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(dataWine)) {
download.file(wine_url, destfile=dataWine, method="curl")
}
library(curl)
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(dataWine)) {
download.file(wine_url, destfile=dataWine, method="curl")
}
getwd()
if (!file.exists(dataWine)) {
download.file(wine_url, destfile=dataWine, method="curl")
}
download.file(wine_url, destfile=dataWine, method="curl")
download.file(wine_url, destfiele = dataWine)
download.file(wine_url, destfile = dataWine)
download.file(wine_url, destfile = dataWine, method = "curl")
download.file(wine_url, destfile = dataWine)
require(rCharts)
wine_url <- "http://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/datasets/wine.csv"
dataWine <- "./data/wine.csv"
if (!file.exists("./data")) {
dir.create("./data")
}
if (!file.exists(dataWine)) {
download.file(wine_url, destfile=dataWine)
}
raw_data <- read.csv(dataWine)
attributes <- c("Class", "Alcohol", "Malic acid", "Ash", "Alcalinity of ash", "Magnesium", "Total phenols", "Flavanoids",
"Nonflavanoid phenols", "Proanthocyanins", "Color intensity", "Hue", "OD280/OD315 of diluted wines", "Proline")
names(raw_data) <- attributes
raw_data$Class <- as.factor(raw_data$Class)
raw_data[,6] = as.numeric(as.character(raw_data[,6]))
raw_data[,14] = as.numeric(as.character(raw_data[,14]))
data = as.data.frame(raw_data)
str(data)
names(raw_data)
nPlot(Hue ~ "Color intensity", group = "Class", type = 'multiBarChart', data = data)
install.packages(rCharts)
install.packages("rCharts")
install_github('rCharts', 'ramnathv')
install_github('ramnathv/rCharts')
install_github('ramnathv/rCharts', force = TRUE)
library(rCharts)
nPlot(Hue ~ "Color intensity", group = "Class", type = 'multiBarChart', data = data)
nPlot(Class ~ "Color intensity", group = "Hue", type = 'multiBarChart', data = data)
rPlot(Class ~ "Color intensity", group = "Hue", data = data)
rPlot(Class ~ "Color intensity", group = "Hue", data = data, type = 'point')
rPlot(Class ~ Color intensity, group = Hue, data = data, type = 'point')
rPlot("Class" ~ "Color intensity", group = "Hue", data = data, type = 'point')
nPlot("Class" ~ "Color intensity", group = "Hue", data = data, type = 'point')
rPlot("Color intensity" ~ "Class", group = "Hue", data = data, type = 'point')
rPlot("Color intensity" ~ "Class", group = "Hue", data = data)
nPlot("Color intensity" ~ "Class", group = "Hue", data = data)
nPlot("Color intensity" ~ "Class", group = "Hue", data = data, type = 'multiBarChart')
nPlot("Color intensity" ~ "Class", data = data, type = 'multiBarChart')
data
rPlot("Color intensity" ~ "Class", data = data, type = 'point')
rPlot("Alcohol" ~ "Class", data = data, type = 'point')
str(data)
rPlot("Alcohol"|"Hue" ~ "Class", data = data, type = 'point')
rPlot("Alcohol" ~ "Class" | "Hue", data = data, type = 'point')
rPlot("Alcohol" ~ "Class" | "Proline", data = data, type = 'point')
rPlot("Alcohol" ~ "Class", data = data, type = 'point')
nPlot("Alcohol" ~ "Class", data = data, type = 'multiBarChart')
rPlot("Alcohol" ~ "Class", data = data, type = 'multiBarChart')
rPlot("Alcohol" ~ "Class", data = data, type = 'box')
rPlot("Alcohol" ~ "Class", data = data, type = 'point')
library(data.table)
as.data.table(data)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
getwd()
setwd("C:/Users/Dominique/Google Drive/Coursera/data-products/CourseProject/")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
seed(123)
get.seed(123)
set.seed(123)
rnorm(10)
rnorm(10)
set.seed(123)
rnorm(10)
set.seed(1234)
rnorm(10)
set.seed(1234)
rnorm(10)
rnorm(10)
rnorm(10)
set.seed(1234)
rnorm(10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/Dominique/Google Drive/Coursera/data-products/Data Products Presentation/")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
